{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-nexmoe/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/copy-codeblock.js","path":"js/copy-codeblock.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/lax.min.js","path":"lib/lax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/preset/plain.styl","path":"preset/plain.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.css","path":"lib/fancybox/fancybox.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.umd.js","path":"lib/fancybox/fancybox.umd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo.css","path":"lib/iconfont/demo.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","path":"lib/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","path":"lib/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","path":"lib/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","path":"lib/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","path":"lib/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","path":"lib/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","path":"lib/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","path":"lib/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","path":"lib/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.css","path":"lib/mdui_043tiny/mdui.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.js","path":"lib/mdui_043tiny/mdui.js","modified":0,"renderable":1},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":0},{"_id":"source/images/background.jpeg","path":"images/background.jpeg","modified":1,"renderable":0},{"_id":"source/images/image-20220528024137300.png","path":"images/image-20220528024137300.png","modified":1,"renderable":0},{"_id":"source/images/image-20220528025252265.png","path":"images/image-20220528025252265.png","modified":1,"renderable":0},{"_id":"source/images/image-20220528025403558.png","path":"images/image-20220528025403558.png","modified":1,"renderable":0},{"_id":"source/images/image-20220528025833965.png","path":"images/image-20220528025833965.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/无互联网环境nexus的搭建使用与同步.md","hash":"311c08c875b5736020fe5a350197b02c1d7c82f1","modified":1707345211009},{"_id":"source/_posts/docker/harbor.md","hash":"c7acaee5b0a36de7d8647c89d72fd92727c73d0c","modified":1707287729552},{"_id":"source/_posts/images/background.jpeg","hash":"eff0d7dc7a6eb16f311db703b88ee16b55c4656a","modified":1707308057441},{"_id":"source/_posts/images/avatar.jpeg","hash":"02d15e2f8fff3bf4ce4f2d911e530c6cf0829873","modified":1707308057431},{"_id":"source/_posts/images/image-20220528025833965.png","hash":"9f4c7c34f19986e44a1cf6a6320524f67dadb599","modified":1707308057481},{"_id":"source/_posts/images/image-20220528025252265.png","hash":"a15b920b49fb40f3c6e58d205fece8e2da2ba6cc","modified":1707308057461},{"_id":"node_modules/hexo-theme-nexmoe/.eslintignore","hash":"1d606028dff10b1a8c635142235182379dc3c64e","modified":1707107323586},{"_id":"node_modules/hexo-theme-nexmoe/.eslintrc.json","hash":"ca45d8e5d80ad6b7004cddacae7fc7d8040b2d6f","modified":1707107323646},{"_id":"node_modules/hexo-theme-nexmoe/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1707107323586},{"_id":"node_modules/hexo-theme-nexmoe/index.js","hash":"f3d92ae5f32a9aee66f8b24083a2004d69a2b761","modified":1707107323636},{"_id":"node_modules/hexo-theme-nexmoe/crowdin.yml","hash":"f9f02a9cab975c7de721c5dc4179b77870019cc6","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/package.json","hash":"5f5c79d7fdaa58fa87142085f1f010762afdd643","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/README.md","hash":"7e77fc64595bc4afe6a56ebe0fe525a874b4f017","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/.github/release-drafter.yml","hash":"9be21d7a486404050224d61415226e1ba321f169","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/demo/_config.nexmoe.yml","hash":"8f508665b4512954103e04e1e86f9ebfe30e7748","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/demo/_config.yml","hash":"f5a551599d83995e0dbc4719e7950fa889b3dc64","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/include/config.js","hash":"f26ff9408ca6ce956ef40ac6c6996da36c9df67d","modified":1707107323626},{"_id":"node_modules/hexo-theme-nexmoe/include/dependency.js","hash":"ed975738b982c19565bc2869a51277723fd23e6b","modified":1707107323626},{"_id":"node_modules/hexo-theme-nexmoe/demo/package.json","hash":"883603a5be41686e89c26519e5bfe097343edcc6","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/include/README.md","hash":"912c1a78db7138e3ff6e1ce622dd00e3bfb1afab","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/include/register.js","hash":"446119e7fbc44da8d0fc8c3628c14fadb225c558","modified":1707107323646},{"_id":"node_modules/hexo-theme-nexmoe/languages/en.yml","hash":"1a2ab324edb076988fa7a098d2b011d80738a047","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/languages/it.yml","hash":"334afb6a7967d71ebd2fb32bdd1f8b20174c82bd","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/languages/default.yml","hash":"c76f93c3c0ac4582694e330647f2fe424930ec3a","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/languages/ja.yml","hash":"773c3b0464771c6d5149a2175bb9d7eaceb755ea","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-HK.yml","hash":"6b6ada7b425c137cd51edc2f4890b96a21482558","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-TW.yml","hash":"e4ababddda52aa89f0fd51909c2211bcd10abb53","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-CN.yml","hash":"b30de168c5bc226cdb9dbd7358b7b0d33a34e1d5","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh.yml","hash":"81aa48d1ada886cb10f5a195c3afb250f962f3ac","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/layout/index.jsx","hash":"20373ddf76f6d59dde51833e754c9f70cc804f77","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/layout.jsx","hash":"e347c8e933b3e496add81502c1a2e229b0042f73","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/scripts/index.js","hash":"c00aba78d38330728dbbdbb0bae57f1b00a7de5e","modified":1707107323636},{"_id":"node_modules/hexo-theme-nexmoe/layout/py.jsx","hash":"590216a1f66a2085d98544fe082c503ec3baa02e","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/post.ejs","hash":"a22ebd3ceec83722a0c2b1a5bc11688818ae25a7","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/archives.ejs","hash":"2395fdfee67880c1c6b4796882c6fda67930f1f7","modified":1707107323606},{"_id":"node_modules/hexo-theme-nexmoe/source/_config.yml","hash":"c09a5a5a10889ef15cbfad988474527ccad19546","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_en.md","hash":"557484415c610222b16b58df470c2a768782c4fc","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"d6c77dbb2a3d638d748280fb37dd29375aebe98c","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"843abf5e1d7b06cb1feddd75f7025150d46a91c2","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_en.md","hash":"803f6736473a122ed78867e64681defcd2edd954","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/.github/workflows/npm-publish.yml","hash":"b57ce794238f61bb8223752e516970cd1b7732c9","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/demo/.github/dependabot.yml","hash":"25b0257a0db2c5b6a5756d8990bc2cba12f54fc5","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/.github/workflows/release-drafter.yml","hash":"ccbe1e1ae6ee3b2a7d32362791aa006afa95e94d","modified":1707107323726},{"_id":"node_modules/hexo-theme-nexmoe/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1707107323626},{"_id":"node_modules/hexo-theme-nexmoe/demo/scaffolds/draft.md","hash":"204ab550ddffa92051ea0eb2484a78d84dac3693","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/demo/scaffolds/page.md","hash":"f0af1cb10f27d859caa51c8e3704469d9ed842a6","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_index/list.ejs","hash":"e98a95f50d6f9042302ec4fad62ac85c5336ba26","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/demo/scaffolds/post.md","hash":"e7169dab8ce62d41e3734e30706fa786cc7d46f4","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/background.jsx","hash":"05ee70bc00ddac592469a9e56cfdb9f683f130ef","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/head.ejs","hash":"c14cec07f778dbf643e51671e47c2e6e711045b8","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/paginator.jsx","hash":"9b1f26c6f899b1c66c65d7213137f02796b56236","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/searchbox.jsx","hash":"83714b79399e0bef913bef8c4dbef58e9dd875f2","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/right.ejs","hash":"e4db789fcf7f7dfe58e22c78ae30a5db2355cc47","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/archive.ejs","hash":"2c8c5ee017bfdd56cbb80c7796ef9393aea16d52","modified":1707107323606},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/link.ejs","hash":"61bc7a6018309f5b3525b451ccdd62e6664f7e74","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/hitokoto.ejs","hash":"2c9c3567d2b5a99cdbca90673c638409529881db","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/recent_posts.ejs","hash":"7d9eaf8228eda803aa4956e55432f78e056d6a01","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/social.ejs","hash":"133927c64cbe6f9cf6601e32be0b03ed576dfbf5","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/search.ejs","hash":"9771d5e03623a8892c23dab9b24360edbaf87233","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/category.ejs","hash":"99113b9f2cb4ffefdda3e3a343647ac6a5083091","modified":1707107323606},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/image_filter.js","hash":"284c3f15eaba3ff6db42fe12f921fada5c6f24b4","modified":1707107323636},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/css_auto_version.js","hash":"354700a113aca785c82bd59a16901a2dff2a2580","modified":1707107323626},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/js_auto_version.js","hash":"96e6d7d0dadd39198e33ec8d5f0331e4a600ca37","modified":1707107323636},{"_id":"node_modules/hexo-theme-nexmoe/scripts/tag/links.js","hash":"3676a23bdf32e0c1a933ccb8a79da6c5880a2e19","modified":1707107323636},{"_id":"node_modules/hexo-theme-nexmoe/scripts/tag/gallery.js","hash":"bc07b003bd405138ff4bca5fb03ba180fc29b92e","modified":1707107323636},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/tagcloud.ejs","hash":"25e1af5116bd5cbf6c1d1e259a8564e21a3a28d5","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/tag.ejs","hash":"ddf844f08124454bea2a30f8349b63f3cb63ac16","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/source/js/app.js","hash":"965c3befaa26a06484204b34f20b8770e186866a","modified":1707107323626},{"_id":"node_modules/hexo-theme-nexmoe/source/js/search.js","hash":"eb69cd78f6ab8d3e83576dae29f09c9af0ffe8b9","modified":1707107323646},{"_id":"node_modules/hexo-theme-nexmoe/source/js/copy-codeblock.js","hash":"51f1b526133258db1080826574c50a683a34c559","modified":1707107323626},{"_id":"node_modules/hexo-theme-nexmoe/source/css/style.styl","hash":"2021dacedfe0f6f2ed6fdf6a9e9c067fe792cde0","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/lax.min.js","hash":"1de100aa90834f1f4fae9a4deb44a73048fefff0","modified":1707107323636},{"_id":"node_modules/hexo-theme-nexmoe/source/preset/plain.styl","hash":"0413a4e36642110f0a23738d10f2874e6e43ed6d","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/demo/source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/body.jsx","hash":"7e63a37bcd01a67950fb4f52895bf9e6cf9f955b","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/content.jsx","hash":"4bfadb1ce4e732289f43f81cfce41fb35a3f2f89","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/header.ejs","hash":"24ebcbd15daee1b6b1ede4ffaffa9b86f7154167","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/footer.jsx","hash":"167f67e30cdb15576c9cd9dd7cc6aafb4625e069","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/body.jsx","hash":"1d8210e9968298440a1da0cc86c3e3454dba4427","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/content.jsx","hash":"13a868d0b70283aaaa49770ad530261eda7a750d","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/header.jsx","hash":"3ede4910be7915854ee06a545aa8ee04bd216031","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/footer.jsx","hash":"3ede4910be7915854ee06a545aa8ee04bd216031","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/meta.ejs","hash":"be2fdf6732f49d5d3277b4e4b0a4f9fc85fa4643","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/copyright.ejs","hash":"bf2cb43d66842b4bc51eb6908c588044a68d1364","modified":1707107323606},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/word-count.ejs","hash":"5415f792394b364fcbc1502971874dac6ea54de4","modified":1707107323626},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/archives.styl","hash":"3f401f6caf7e7ed6c0b7fe622ed02a25cc9e5237","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/tag.ejs","hash":"5934bcb1b256642708c97f61da85fbdbd959a078","modified":1707107323616},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/background.styl","hash":"a4c012e17734de0bf1a62bf5b5ebc98755b23bcb","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/article.styl","hash":"726d9837026a4979dae3d9d790feba952de98b48","modified":1707107323706},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_index/list.styl","hash":"6ce0e88126225e582c4d788c4c88a30c11fee8fb","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/copy-codeblock.styl","hash":"83372948cb098a8ad1da8bde17963701b8e39409","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/pagination.styl","hash":"aa22dd62542d69f07ce5178cd3f94cf20c9f1bca","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/searchbox.styl","hash":"b25cefb269bb7188ed9d6ab0b530f30e138b33d1","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/py.styl","hash":"53c72cb99593d83523559013713fc25b4ae5957c","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_widget/index.styl","hash":"465acffbe8cc98c3b275cc286c0991f422930b60","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1707107323586},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_widget/hitokoto.styl","hash":"0086bb5a3f250439be64588fca075ee3326a6ad1","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo.css","hash":"53456972a11d52af67187fc17999e6665f9f06fe","modified":1707107323586},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","hash":"3566d949bdc045cd816be382d180b796e0a78748","modified":1707107323596},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","hash":"a82acbfeabc50a6668ebf6115b5c5c3d308079b6","modified":1707107323626},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","hash":"1d1851c2197382a9b7cd3b3fcdef79a61ad331f6","modified":1707107323626},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","hash":"0dd0193f6f400e5da6d3aef89f76c22c79e0f396","modified":1707107323646},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","hash":"2af6d26577c3ae2ca126351f0be764cbae9da6ff","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","hash":"e292802913e6c248a17797dc24ecfc0a3473c3cf","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","hash":"a536d4780220f9cd7fc5126d9ec1108b19afb6b9","modified":1707107323636},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","hash":"b0f4b5501cbcaeaf15dc608359574a29bc4c4265","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","hash":"9209e4f7e45d37e58356e5ede7ea9d6d9e922d77","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/nexmoe/header.styl","hash":"b1c905f3a6089936aa6740546c266c03a99a8169","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/nexmoe/content.styl","hash":"718c99320e6862a020e2652d8259c980283a6ac0","modified":1707107323716},{"_id":"source/_posts/images/image-20220528024137300.png","hash":"74cedfb12410a995e257134dac13641b88d87c7a","modified":1707308057451},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/xiaoshu/content.styl","hash":"0e382da59dfe8bb1451b115e1c32f40ed126174f","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/xiaoshu/footer.styl","hash":"bebef911fb8030bbfed418492e6c1c0eae2306a7","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/xiaoshu/header.styl","hash":"fb047e449d0a3f37f8beffc31af0ed9ffa2da9d3","modified":1707107323716},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.umd.js","hash":"f2126b3e96721606a2ba20e0f148404814262171","modified":1707107323636},{"_id":"node_modules/hexo-theme-nexmoe/demo/package-lock.json","hash":"37e07fd906a664c3706e684e8efcb4d86f31e3e9","modified":1707107323696},{"_id":"source/_posts/images/image-20220528025403558.png","hash":"c4fa8ed2206cb85cc5e3fe217a9e3951605d53f5","modified":1707308057471},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.css","hash":"1500b5d27b8ce2e7c543bb6d7205de43059378db","modified":1707107323606},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.js","hash":"5c0bced25b23773e764338ae4581f366f984cb6c","modified":1707107323646},{"_id":"public/content.json","hash":"5da2546d8c05728d1ee32434521ea6b2344bc405","modified":1707338343343},{"_id":"public/archives/index.html","hash":"f3dae2cf176ec8bc38c6befddafc927afa1cca62","modified":1707338343343},{"_id":"public/archives/2024/index.html","hash":"a08fcb2e655501cf0ce26eb69352f6b3857b8ab5","modified":1707338343343},{"_id":"public/archives/2024/02/index.html","hash":"05addbc1f94981b4121a47e0ffede25438c62b3a","modified":1707338343343},{"_id":"public/index.html","hash":"b99dac67cb2a4c59d1eada1433edea511086eca7","modified":1707338343343},{"_id":"public/tags/harbor-docker-podman/index.html","hash":"94a03f05b1c36e6f332d96b786240c89c562ca55","modified":1707338343343},{"_id":"public/2024/02/07/无互联网环境nexus的搭建使用与同步/index.html","hash":"8b4c08b185acb812af8f9a09da73983cfd53c2dd","modified":1707338343343},{"_id":"public/2024/02/05/docker/harbor/index.html","hash":"74c93735b57f33705e068895706b140874c2d665","modified":1707338343343},{"_id":"public/lib/iconfont/iconfont.eot","hash":"1d1851c2197382a9b7cd3b3fcdef79a61ad331f6","modified":1707338343343},{"_id":"public/lib/iconfont/iconfont.svg","hash":"2af6d26577c3ae2ca126351f0be764cbae9da6ff","modified":1707338343343},{"_id":"public/lib/iconfont/iconfont.ttf","hash":"b0f4b5501cbcaeaf15dc608359574a29bc4c4265","modified":1707338343343},{"_id":"public/lib/iconfont/iconfont.woff","hash":"e292802913e6c248a17797dc24ecfc0a3473c3cf","modified":1707338343343},{"_id":"public/lib/iconfont/iconfont.woff2","hash":"9209e4f7e45d37e58356e5ede7ea9d6d9e922d77","modified":1707338343343},{"_id":"public/js/search.js","hash":"eb69cd78f6ab8d3e83576dae29f09c9af0ffe8b9","modified":1707338343343},{"_id":"public/js/app.js","hash":"965c3befaa26a06484204b34f20b8770e186866a","modified":1707338343343},{"_id":"public/js/copy-codeblock.js","hash":"51f1b526133258db1080826574c50a683a34c559","modified":1707338343343},{"_id":"public/preset/plain.css","hash":"368322b6cc3b448ed92d2cadd0fb3abc421d8ab4","modified":1707338343343},{"_id":"public/lib/lax.min.js","hash":"1de100aa90834f1f4fae9a4deb44a73048fefff0","modified":1707338343343},{"_id":"public/lib/fancybox/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1707338343343},{"_id":"public/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1707338343343},{"_id":"public/lib/iconfont/iconfont.css","hash":"01952f8f10c716cbb463b589a345e46f1b8cc101","modified":1707338343343},{"_id":"public/lib/iconfont/iconfont.json","hash":"8fbdca1d1886c8c6d9bfe1fb105595c65050a175","modified":1707338343343},{"_id":"public/css/style.css","hash":"2986810eeaa90c45dce6d38f4b6ff845f39a2f0a","modified":1707338343343},{"_id":"public/lib/iconfont/demo_index.html","hash":"df3f126af2695d3dd839edcfda49b951b02f701e","modified":1707338343343},{"_id":"public/lib/iconfont/iconfont.js","hash":"a536d4780220f9cd7fc5126d9ec1108b19afb6b9","modified":1707338343343},{"_id":"public/lib/fancybox/fancybox.umd.js","hash":"f2126b3e96721606a2ba20e0f148404814262171","modified":1707338343343},{"_id":"public/lib/mdui_043tiny/mdui.js","hash":"0bd653abb12272e4ed2122dbdc8ca1c2b140a363","modified":1707338343343},{"_id":"public/lib/mdui_043tiny/mdui.css","hash":"b79ef94d2b11f8ce05ba048f5d74a3bd09f12e4d","modified":1707338343343},{"_id":"source/images/background.jpeg","hash":"eff0d7dc7a6eb16f311db703b88ee16b55c4656a","modified":1707308057441},{"_id":"source/images/avatar.jpeg","hash":"02d15e2f8fff3bf4ce4f2d911e530c6cf0829873","modified":1707308057431},{"_id":"source/images/image-20220528025252265.png","hash":"a15b920b49fb40f3c6e58d205fece8e2da2ba6cc","modified":1707308057461},{"_id":"source/images/image-20220528024137300.png","hash":"74cedfb12410a995e257134dac13641b88d87c7a","modified":1707308057451},{"_id":"source/images/image-20220528025833965.png","hash":"9f4c7c34f19986e44a1cf6a6320524f67dadb599","modified":1707308057481},{"_id":"source/images/image-20220528025403558.png","hash":"c4fa8ed2206cb85cc5e3fe217a9e3951605d53f5","modified":1707308057471}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"无互联网环境nexus的搭建使用与同步","date":"2024-02-07T12:11:40.000Z","_content":"[TOC]\n\n# 一. 前言\n\n​\t\t在离线环境（与物联网物理隔离的私网）中实施项目，很多时候能够有一个远程debug环境是心情很愉悦的。往往在私网中搭建开发/debug环境很费尽，一是准备开发环境（idea、jdk、maven等开发工具），此工作虽然繁杂但却一劳永逸；二是maven依赖的拷贝工作繁杂且无法做到一劳永逸。所以快速的管理私有网中的maven构建往往能够有效的提升工作效率。\n\n\n\n# 二. 搭建nexus服务器\n\n​\t\tnexus的搭建方式采用docker部署较为快捷且简单。\n\n1. 私网中找一台服务器准备docker环境；\n\n2. 互联网拉取docker镜像\n\n   ```bash\n   docker pull sonatype/nexus3:3.38.1\n   ```\n\n3. 互联网保存docker镜像\n\n   ```bash\n   docker save -o nexus3.tar.gz sonatype/nexus3:3.38.1\n   ```\n\n4. 拷贝nexus3.tar.gz镜像压缩文件到私网服务器并加载镜像\n\n   ```bash\n   docker load -i nexus3.tar.gz && rm nexus3.tar.gz\n   ```\n\n5. 使用镜像创建容器。其中dataDir为宿主机目录，用于存储nexus3的数据。更多参数参考[sonatype/nexus3 - Docker Image | Docker Hub](https://hub.docker.com/r/sonatype/nexus3)\n\n   ```bash\n   docker run -d -p 8081:8081 --name nexus -v ${dataDir}:/nexus-data sonatype/nexus3\n   ```\n\n6. 仓库管理\n\n   由于是与互联网隔离环境所有不需要任何proxy类型仓库，将默认所有仓库删除创建一个hosted类型的仓库即可。\n\n# 三.本地maven构件增量打包\n\n​\t\t项目源代码往往在互联网进行开发，maven本地仓库可能会很大，从数GB到数十GB均有可能，且由大量的小文件组成，拷贝速度感人。如何快速增量拷贝本地仓库文件显得尤为重要。\n\n​\t\t以下脚本放置到本地仓库存储目录中（一般为~/.m2/）并执行，并在脚本放置目录中执行 sh fileName.sh  n，其中n为数字表示仅仅对n天以内存在变更的文件进行压缩打包。（脚本过滤了mac/linux上隐藏文件以及maven产生的一些无用临时文件，仅仅对需要的文件进行打包压缩。）\n\n​\t\t通过脚本可以避免每一次对本地仓库构建全量打包，节约打包压缩、拷贝、以及后面的上传时间。\n\n​\t\t脚本执行成功后将在脚本所在目录生成 repository.tar.gz文件，将其拷贝到私网nexus服务上。\n\n```bash\n#!/bin/bash\n\nfunction findAndTar(){\n    echo $1\n    find . -mtime -$1  -type f | grep -E \".(jar|pom|sha1)$\" > list.txt\n    tar -T list.txt -czf repository.tar.gz\n    rm -rf list.txt\n}\n\nfindAndTar $1\necho 'success'\nexit 0\n```\n\n# 四.上传maven构件到私网nexus服务器\n\n1. 将repository拷贝到nexus私服中并解压，解压后得到repository目录；\n\n2. 在repository目录内创建up.sh文件，文件内容如下：\n\n   ```bash\n   #!/bin/bash\n   while getopts \":r:u:p:\" opt; do\n   \tcase $opt in\n   \t\tr) REPO_URL=\"$OPTARG\"\n   \t\t;;\n   \t\tu) USERNAME=\"$OPTARG\"\n   \t\t;;\n   \t\tp) PASSWORD=\"$OPTARG\"\n   \t\t;;\n   \tesac\n   done\n   \n   find . -type f -not -path './mavenimport\\.sh*' -not -path '*/\\.*' -not -path '*/\\^archetype\\-catalog\\.xml*' -not -path '*/\\^maven\\-metadata\\-local*\\.xml' -not -path '*/\\^maven\\-metadata\\-deployment*\\.xml' | sed \"s|^\\./||\" | xargs -I '{}' curl -u \"$USERNAME:$PASSWORD\" -X PUT -v -T {} ${REPO_URL}/{} ;\n   \n   ```\n\n3. 在repository目录下执行 sh up.sh -r r -u u -p p 命令，其中r、u、p分别代表仓库地址、nexus访问用户名、nexus访问密码。\n\n   仓库地址即二中创建的hosted类型仓库，地址可从下图标红处拷贝。\n\n   ![image-20220528024137300](../images/image-20220528024137300.png)\n\n4. 配置开发机器的maven setting.xml，在mirrors标签内添加如下内容：\n\n   ```xml\n   <mirror>\n     <!--id值可以自行取名称-->\n     <id>mirrorId</id>\n     <!--mirrorof值必须设置为*-->\n     <mirrorOf>*</mirrorOf>\n     <!--url的值填写nexus3的发布地址，同3中的r值-->\n     <url>http://my.repository.com/repo/path</url>\n   </mirror>\n   ```\n\n5. 配置nexus3定时重新构建元数据\n\n   ![image-20220528025252265](../images/image-20220528025252265.png)\n\n   ![image-20220528025403558](../images/image-20220528025403558.png)\n\n\n\nFAQ:\n\n1. maven-metadata.xml 文件无法下载\n\n   ​\t\tmaven构件增量上传到nexus3私服后可能开始无法下载依赖，编译报错 无法下载 maven-metadata.xml文件。此时手动执行一下重新构建元数据任务即可正常。\n\n   ![image-20220528025833965](../images/image-20220528025252265.png)\n\n   ​\t\t原因：部分依赖传递的依赖没有明确指定版本号，而是指定了一个版本号范围。此时maven需要下载被依赖构建的元数据（maven-metadata.xml）文件并从中获取一个具体的版本号。但是重新构建元数据任务是定时执行的，刚上传的构件元数据文件可能还未生成或还未更新，此时手动执行一次任务即可。\n","source":"_posts/无互联网环境nexus的搭建使用与同步.md","raw":"---\ntitle: 无互联网环境nexus的搭建使用与同步\ndate: 2024-02-07 20:11:40\ntags: \n   - nexus\n   - maven\n   - java\n---\n[TOC]\n\n# 一. 前言\n\n​\t\t在离线环境（与物联网物理隔离的私网）中实施项目，很多时候能够有一个远程debug环境是心情很愉悦的。往往在私网中搭建开发/debug环境很费尽，一是准备开发环境（idea、jdk、maven等开发工具），此工作虽然繁杂但却一劳永逸；二是maven依赖的拷贝工作繁杂且无法做到一劳永逸。所以快速的管理私有网中的maven构建往往能够有效的提升工作效率。\n\n\n\n# 二. 搭建nexus服务器\n\n​\t\tnexus的搭建方式采用docker部署较为快捷且简单。\n\n1. 私网中找一台服务器准备docker环境；\n\n2. 互联网拉取docker镜像\n\n   ```bash\n   docker pull sonatype/nexus3:3.38.1\n   ```\n\n3. 互联网保存docker镜像\n\n   ```bash\n   docker save -o nexus3.tar.gz sonatype/nexus3:3.38.1\n   ```\n\n4. 拷贝nexus3.tar.gz镜像压缩文件到私网服务器并加载镜像\n\n   ```bash\n   docker load -i nexus3.tar.gz && rm nexus3.tar.gz\n   ```\n\n5. 使用镜像创建容器。其中dataDir为宿主机目录，用于存储nexus3的数据。更多参数参考[sonatype/nexus3 - Docker Image | Docker Hub](https://hub.docker.com/r/sonatype/nexus3)\n\n   ```bash\n   docker run -d -p 8081:8081 --name nexus -v ${dataDir}:/nexus-data sonatype/nexus3\n   ```\n\n6. 仓库管理\n\n   由于是与互联网隔离环境所有不需要任何proxy类型仓库，将默认所有仓库删除创建一个hosted类型的仓库即可。\n\n# 三.本地maven构件增量打包\n\n​\t\t项目源代码往往在互联网进行开发，maven本地仓库可能会很大，从数GB到数十GB均有可能，且由大量的小文件组成，拷贝速度感人。如何快速增量拷贝本地仓库文件显得尤为重要。\n\n​\t\t以下脚本放置到本地仓库存储目录中（一般为~/.m2/）并执行，并在脚本放置目录中执行 sh fileName.sh  n，其中n为数字表示仅仅对n天以内存在变更的文件进行压缩打包。（脚本过滤了mac/linux上隐藏文件以及maven产生的一些无用临时文件，仅仅对需要的文件进行打包压缩。）\n\n​\t\t通过脚本可以避免每一次对本地仓库构建全量打包，节约打包压缩、拷贝、以及后面的上传时间。\n\n​\t\t脚本执行成功后将在脚本所在目录生成 repository.tar.gz文件，将其拷贝到私网nexus服务上。\n\n```bash\n#!/bin/bash\n\nfunction findAndTar(){\n    echo $1\n    find . -mtime -$1  -type f | grep -E \".(jar|pom|sha1)$\" > list.txt\n    tar -T list.txt -czf repository.tar.gz\n    rm -rf list.txt\n}\n\nfindAndTar $1\necho 'success'\nexit 0\n```\n\n# 四.上传maven构件到私网nexus服务器\n\n1. 将repository拷贝到nexus私服中并解压，解压后得到repository目录；\n\n2. 在repository目录内创建up.sh文件，文件内容如下：\n\n   ```bash\n   #!/bin/bash\n   while getopts \":r:u:p:\" opt; do\n   \tcase $opt in\n   \t\tr) REPO_URL=\"$OPTARG\"\n   \t\t;;\n   \t\tu) USERNAME=\"$OPTARG\"\n   \t\t;;\n   \t\tp) PASSWORD=\"$OPTARG\"\n   \t\t;;\n   \tesac\n   done\n   \n   find . -type f -not -path './mavenimport\\.sh*' -not -path '*/\\.*' -not -path '*/\\^archetype\\-catalog\\.xml*' -not -path '*/\\^maven\\-metadata\\-local*\\.xml' -not -path '*/\\^maven\\-metadata\\-deployment*\\.xml' | sed \"s|^\\./||\" | xargs -I '{}' curl -u \"$USERNAME:$PASSWORD\" -X PUT -v -T {} ${REPO_URL}/{} ;\n   \n   ```\n\n3. 在repository目录下执行 sh up.sh -r r -u u -p p 命令，其中r、u、p分别代表仓库地址、nexus访问用户名、nexus访问密码。\n\n   仓库地址即二中创建的hosted类型仓库，地址可从下图标红处拷贝。\n\n   ![image-20220528024137300](../images/image-20220528024137300.png)\n\n4. 配置开发机器的maven setting.xml，在mirrors标签内添加如下内容：\n\n   ```xml\n   <mirror>\n     <!--id值可以自行取名称-->\n     <id>mirrorId</id>\n     <!--mirrorof值必须设置为*-->\n     <mirrorOf>*</mirrorOf>\n     <!--url的值填写nexus3的发布地址，同3中的r值-->\n     <url>http://my.repository.com/repo/path</url>\n   </mirror>\n   ```\n\n5. 配置nexus3定时重新构建元数据\n\n   ![image-20220528025252265](../images/image-20220528025252265.png)\n\n   ![image-20220528025403558](../images/image-20220528025403558.png)\n\n\n\nFAQ:\n\n1. maven-metadata.xml 文件无法下载\n\n   ​\t\tmaven构件增量上传到nexus3私服后可能开始无法下载依赖，编译报错 无法下载 maven-metadata.xml文件。此时手动执行一下重新构建元数据任务即可正常。\n\n   ![image-20220528025833965](../images/image-20220528025252265.png)\n\n   ​\t\t原因：部分依赖传递的依赖没有明确指定版本号，而是指定了一个版本号范围。此时maven需要下载被依赖构建的元数据（maven-metadata.xml）文件并从中获取一个具体的版本号。但是重新构建元数据任务是定时执行的，刚上传的构件元数据文件可能还未生成或还未更新，此时手动执行一次任务即可。\n","slug":"无互联网环境nexus的搭建使用与同步","published":1,"updated":"2024-02-07T22:45:51.186Z","_id":"clsbrm2kz0000yrulbckv4nq0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<h1 id=\"一-前言\"><a href=\"#一-前言\" class=\"headerlink\" title=\"一. 前言\"></a>一. 前言</h1><p>​\t\t在离线环境（与物联网物理隔离的私网）中实施项目，很多时候能够有一个远程debug环境是心情很愉悦的。往往在私网中搭建开发&#x2F;debug环境很费尽，一是准备开发环境（idea、jdk、maven等开发工具），此工作虽然繁杂但却一劳永逸；二是maven依赖的拷贝工作繁杂且无法做到一劳永逸。所以快速的管理私有网中的maven构建往往能够有效的提升工作效率。</p>\n<h1 id=\"二-搭建nexus服务器\"><a href=\"#二-搭建nexus服务器\" class=\"headerlink\" title=\"二. 搭建nexus服务器\"></a>二. 搭建nexus服务器</h1><p>​\t\tnexus的搭建方式采用docker部署较为快捷且简单。</p>\n<ol>\n<li><p>私网中找一台服务器准备docker环境；</p>\n</li>\n<li><p>互联网拉取docker镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sonatype/nexus3:3.38.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>互联网保存docker镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o nexus3.tar.gz sonatype/nexus3:3.38.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拷贝nexus3.tar.gz镜像压缩文件到私网服务器并加载镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i nexus3.tar.gz &amp;&amp; <span class=\"built_in\">rm</span> nexus3.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用镜像创建容器。其中dataDir为宿主机目录，用于存储nexus3的数据。更多参数参考<a href=\"https://hub.docker.com/r/sonatype/nexus3\">sonatype&#x2F;nexus3 - Docker Image | Docker Hub</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8081 --name nexus -v <span class=\"variable\">$&#123;dataDir&#125;</span>:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>仓库管理</p>\n<p>由于是与互联网隔离环境所有不需要任何proxy类型仓库，将默认所有仓库删除创建一个hosted类型的仓库即可。</p>\n</li>\n</ol>\n<h1 id=\"三-本地maven构件增量打包\"><a href=\"#三-本地maven构件增量打包\" class=\"headerlink\" title=\"三.本地maven构件增量打包\"></a>三.本地maven构件增量打包</h1><p>​\t\t项目源代码往往在互联网进行开发，maven本地仓库可能会很大，从数GB到数十GB均有可能，且由大量的小文件组成，拷贝速度感人。如何快速增量拷贝本地仓库文件显得尤为重要。</p>\n<p>​\t\t以下脚本放置到本地仓库存储目录中（一般为~&#x2F;.m2&#x2F;）并执行，并在脚本放置目录中执行 sh fileName.sh  n，其中n为数字表示仅仅对n天以内存在变更的文件进行压缩打包。（脚本过滤了mac&#x2F;linux上隐藏文件以及maven产生的一些无用临时文件，仅仅对需要的文件进行打包压缩。）</p>\n<p>​\t\t通过脚本可以避免每一次对本地仓库构建全量打包，节约打包压缩、拷贝、以及后面的上传时间。</p>\n<p>​\t\t脚本执行成功后将在脚本所在目录生成 repository.tar.gz文件，将其拷贝到私网nexus服务上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">findAndTar</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span></span><br><span class=\"line\">    find . -mtime -<span class=\"variable\">$1</span>  -<span class=\"built_in\">type</span> f | grep -E <span class=\"string\">&quot;.(jar|pom|sha1)$&quot;</span> &gt; list.txt</span><br><span class=\"line\">    tar -T list.txt -czf repository.tar.gz</span><br><span class=\"line\">    <span class=\"built_in\">rm</span> -rf list.txt</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">findAndTar <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-上传maven构件到私网nexus服务器\"><a href=\"#四-上传maven构件到私网nexus服务器\" class=\"headerlink\" title=\"四.上传maven构件到私网nexus服务器\"></a>四.上传maven构件到私网nexus服务器</h1><ol>\n<li><p>将repository拷贝到nexus私服中并解压，解压后得到repository目录；</p>\n</li>\n<li><p>在repository目录内创建up.sh文件，文件内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">getopts</span> <span class=\"string\">&quot;:r:u:p:&quot;</span> opt; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"variable\">$opt</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\tr) REPO_URL=<span class=\"string\">&quot;<span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t\tu) USERNAME=<span class=\"string\">&quot;<span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t\tp) PASSWORD=<span class=\"string\">&quot;<span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t<span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -not -path <span class=\"string\">&#x27;./mavenimport\\.sh*&#x27;</span> -not -path <span class=\"string\">&#x27;*/\\.*&#x27;</span> -not -path <span class=\"string\">&#x27;*/\\^archetype\\-catalog\\.xml*&#x27;</span> -not -path <span class=\"string\">&#x27;*/\\^maven\\-metadata\\-local*\\.xml&#x27;</span> -not -path <span class=\"string\">&#x27;*/\\^maven\\-metadata\\-deployment*\\.xml&#x27;</span> | sed <span class=\"string\">&quot;s|^\\./||&quot;</span> | xargs -I <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> curl -u <span class=\"string\">&quot;<span class=\"variable\">$USERNAME</span>:<span class=\"variable\">$PASSWORD</span>&quot;</span> -X PUT -v -T &#123;&#125; <span class=\"variable\">$&#123;REPO_URL&#125;</span>/&#123;&#125; ;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在repository目录下执行 sh up.sh -r r -u u -p p 命令，其中r、u、p分别代表仓库地址、nexus访问用户名、nexus访问密码。</p>\n<p>仓库地址即二中创建的hosted类型仓库，地址可从下图标红处拷贝。</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/../images/image-20220528024137300.png\" alt=\"image-20220528024137300\" data-caption=\"image-20220528024137300\" loading=\"lazy\"></p>\n</li>\n<li><p>配置开发机器的maven setting.xml，在mirrors标签内添加如下内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--id值可以自行取名称--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>mirrorId<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--mirrorof值必须设置为*--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--url的值填写nexus3的发布地址，同3中的r值--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://my.repository.com/repo/path<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置nexus3定时重新构建元数据</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/../images/image-20220528025252265.png\" alt=\"image-20220528025252265\" data-caption=\"image-20220528025252265\" loading=\"lazy\"></p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/../images/image-20220528025403558.png\" alt=\"image-20220528025403558\" data-caption=\"image-20220528025403558\" loading=\"lazy\"></p>\n</li>\n</ol>\n<p>FAQ:</p>\n<ol>\n<li><p>maven-metadata.xml 文件无法下载</p>\n<p>​\t\tmaven构件增量上传到nexus3私服后可能开始无法下载依赖，编译报错 无法下载 maven-metadata.xml文件。此时手动执行一下重新构建元数据任务即可正常。</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/../images/image-20220528025252265.png\" alt=\"image-20220528025833965\" data-caption=\"image-20220528025833965\" loading=\"lazy\"></p>\n<p>​\t\t原因：部分依赖传递的依赖没有明确指定版本号，而是指定了一个版本号范围。此时maven需要下载被依赖构建的元数据（maven-metadata.xml）文件并从中获取一个具体的版本号。但是重新构建元数据任务是定时执行的，刚上传的构件元数据文件可能还未生成或还未更新，此时手动执行一次任务即可。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"一-前言\"><a href=\"#一-前言\" class=\"headerlink\" title=\"一. 前言\"></a>一. 前言</h1><p>​\t\t在离线环境（与物联网物理隔离的私网）中实施项目，很多时候能够有一个远程debug环境是心情很愉悦的。往往在私网中搭建开发&#x2F;debug环境很费尽，一是准备开发环境（idea、jdk、maven等开发工具），此工作虽然繁杂但却一劳永逸；二是maven依赖的拷贝工作繁杂且无法做到一劳永逸。所以快速的管理私有网中的maven构建往往能够有效的提升工作效率。</p>\n<h1 id=\"二-搭建nexus服务器\"><a href=\"#二-搭建nexus服务器\" class=\"headerlink\" title=\"二. 搭建nexus服务器\"></a>二. 搭建nexus服务器</h1><p>​\t\tnexus的搭建方式采用docker部署较为快捷且简单。</p>\n<ol>\n<li><p>私网中找一台服务器准备docker环境；</p>\n</li>\n<li><p>互联网拉取docker镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sonatype/nexus3:3.38.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>互联网保存docker镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o nexus3.tar.gz sonatype/nexus3:3.38.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拷贝nexus3.tar.gz镜像压缩文件到私网服务器并加载镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i nexus3.tar.gz &amp;&amp; <span class=\"built_in\">rm</span> nexus3.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用镜像创建容器。其中dataDir为宿主机目录，用于存储nexus3的数据。更多参数参考<a href=\"https://hub.docker.com/r/sonatype/nexus3\">sonatype&#x2F;nexus3 - Docker Image | Docker Hub</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8081 --name nexus -v <span class=\"variable\">$&#123;dataDir&#125;</span>:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>仓库管理</p>\n<p>由于是与互联网隔离环境所有不需要任何proxy类型仓库，将默认所有仓库删除创建一个hosted类型的仓库即可。</p>\n</li>\n</ol>\n<h1 id=\"三-本地maven构件增量打包\"><a href=\"#三-本地maven构件增量打包\" class=\"headerlink\" title=\"三.本地maven构件增量打包\"></a>三.本地maven构件增量打包</h1><p>​\t\t项目源代码往往在互联网进行开发，maven本地仓库可能会很大，从数GB到数十GB均有可能，且由大量的小文件组成，拷贝速度感人。如何快速增量拷贝本地仓库文件显得尤为重要。</p>\n<p>​\t\t以下脚本放置到本地仓库存储目录中（一般为~&#x2F;.m2&#x2F;）并执行，并在脚本放置目录中执行 sh fileName.sh  n，其中n为数字表示仅仅对n天以内存在变更的文件进行压缩打包。（脚本过滤了mac&#x2F;linux上隐藏文件以及maven产生的一些无用临时文件，仅仅对需要的文件进行打包压缩。）</p>\n<p>​\t\t通过脚本可以避免每一次对本地仓库构建全量打包，节约打包压缩、拷贝、以及后面的上传时间。</p>\n<p>​\t\t脚本执行成功后将在脚本所在目录生成 repository.tar.gz文件，将其拷贝到私网nexus服务上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">findAndTar</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span></span><br><span class=\"line\">    find . -mtime -<span class=\"variable\">$1</span>  -<span class=\"built_in\">type</span> f | grep -E <span class=\"string\">&quot;.(jar|pom|sha1)$&quot;</span> &gt; list.txt</span><br><span class=\"line\">    tar -T list.txt -czf repository.tar.gz</span><br><span class=\"line\">    <span class=\"built_in\">rm</span> -rf list.txt</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">findAndTar <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四-上传maven构件到私网nexus服务器\"><a href=\"#四-上传maven构件到私网nexus服务器\" class=\"headerlink\" title=\"四.上传maven构件到私网nexus服务器\"></a>四.上传maven构件到私网nexus服务器</h1><ol>\n<li><p>将repository拷贝到nexus私服中并解压，解压后得到repository目录；</p>\n</li>\n<li><p>在repository目录内创建up.sh文件，文件内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">getopts</span> <span class=\"string\">&quot;:r:u:p:&quot;</span> opt; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"variable\">$opt</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\tr) REPO_URL=<span class=\"string\">&quot;<span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t\tu) USERNAME=<span class=\"string\">&quot;<span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t\tp) PASSWORD=<span class=\"string\">&quot;<span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t<span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -not -path <span class=\"string\">&#x27;./mavenimport\\.sh*&#x27;</span> -not -path <span class=\"string\">&#x27;*/\\.*&#x27;</span> -not -path <span class=\"string\">&#x27;*/\\^archetype\\-catalog\\.xml*&#x27;</span> -not -path <span class=\"string\">&#x27;*/\\^maven\\-metadata\\-local*\\.xml&#x27;</span> -not -path <span class=\"string\">&#x27;*/\\^maven\\-metadata\\-deployment*\\.xml&#x27;</span> | sed <span class=\"string\">&quot;s|^\\./||&quot;</span> | xargs -I <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> curl -u <span class=\"string\">&quot;<span class=\"variable\">$USERNAME</span>:<span class=\"variable\">$PASSWORD</span>&quot;</span> -X PUT -v -T &#123;&#125; <span class=\"variable\">$&#123;REPO_URL&#125;</span>/&#123;&#125; ;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在repository目录下执行 sh up.sh -r r -u u -p p 命令，其中r、u、p分别代表仓库地址、nexus访问用户名、nexus访问密码。</p>\n<p>仓库地址即二中创建的hosted类型仓库，地址可从下图标红处拷贝。</p>\n<p><img src=\"/../images/image-20220528024137300.png\" alt=\"image-20220528024137300\"></p>\n</li>\n<li><p>配置开发机器的maven setting.xml，在mirrors标签内添加如下内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--id值可以自行取名称--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>mirrorId<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--mirrorof值必须设置为*--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--url的值填写nexus3的发布地址，同3中的r值--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://my.repository.com/repo/path<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置nexus3定时重新构建元数据</p>\n<p><img src=\"/../images/image-20220528025252265.png\" alt=\"image-20220528025252265\"></p>\n<p><img src=\"/../images/image-20220528025403558.png\" alt=\"image-20220528025403558\"></p>\n</li>\n</ol>\n<p>FAQ:</p>\n<ol>\n<li><p>maven-metadata.xml 文件无法下载</p>\n<p>​\t\tmaven构件增量上传到nexus3私服后可能开始无法下载依赖，编译报错 无法下载 maven-metadata.xml文件。此时手动执行一下重新构建元数据任务即可正常。</p>\n<p><img src=\"/../images/image-20220528025252265.png\" alt=\"image-20220528025833965\"></p>\n<p>​\t\t原因：部分依赖传递的依赖没有明确指定版本号，而是指定了一个版本号范围。此时maven需要下载被依赖构建的元数据（maven-metadata.xml）文件并从中获取一个具体的版本号。但是重新构建元数据任务是定时执行的，刚上传的构件元数据文件可能还未生成或还未更新，此时手动执行一次任务即可。</p>\n</li>\n</ol>\n"},{"title":"harbor中多架构镜像离线同步","date":"2024-02-05T06:43:36.000Z","_content":"\n# harbor 多架构镜像维护\n\n## 向harbor推送多架构镜像\n```shell\n## 推送镜像\ndocker push harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64\ndocker push harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64\n## 创建清单\ndocker manifest create --amend --insecure harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64 harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64\n## 为镜像标注平台和架构\ndocker manifest annotate harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64 --os linux --arch amd64\ndocker manifest annotate harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64 --os linux --arch arm64\n## 推送清单\ndocker manifest push --purge --insecure harbor.trscd.com.cn/trs-police/trinodb-trino:438\n\n```\n## 从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中\n- 使用说明\n  - 执行 ./pull.sh -h 查看脚本使用说明。\n  - 脚本执行后产生一个result.tar文件包，将文件离线拷贝解包后，执行里面的push.sh 脚本即可将多架构镜像推送到harbor。\n- 注意： 脚本依赖jq，需要提前安装。\n```shell\n## centos \nyum install jq\n## ubuntu\napt-get install jq\n```\n- 脚本 \n```shell\n#!/bin/bash\n\n# 定义函数来显示帮助文档\ndisplay_help() {\n    cat <<EOF\nUsage: $0 [-h] [-s ARG] [-t ARG] [-p]\n\nOptions:\n  -h 显示帮助.\n  -s 设置原始镜像tag.\n  -t 设置目标镜像tag，不传则不修改镜像tag.\n  -p 保留本地镜像.\nEOF\n    exit 0\n}\n\n# 定义变量来存储参数值\noption_s=\noption_t=\noption_p=\n\n# 解析参数\nwhile getopts \":hs:pt:\" opt; do\n  case $opt in\n    h)\n      display_help\n      ;;\n    s)\n      # shellcheck disable=SC2034\n      option_s=$OPTARG\n      ;;\n    t)\n      # shellcheck disable=SC2034\n      option_t=$OPTARG\n      ;;\n    p)\n      # shellcheck disable=SC2034\n      option_p=\"true\"\n      ;;\n    \\?)\n      # 如果遇到无效的选项，显示帮助文档并退出\n      echo \"Invalid option: -$OPTARG\" >&2\n      display_help\n      ;;\n    :)\n      # 如果选项需要一个参数但没有提供，显示帮助文档并退出\n      echo \"Option -$OPTARG requires an argument.\" >&2\n      display_help\n      ;;\n  esac\ndone\n\n# 检查是否提供了必要的参数\nif [ -z \"$option_s\" ]; then\n    echo \"Error: -s are required.\"\n    display_help\nfi\n\n# 如果目标tag为空，设置目标tag与源tag一致\nif [ -z \"$option_t\" ]; then\n    option_t=\"${option_s}\"\nfi\n\n# 获取脚本目录\nscript_dir=$(dirname \"$(readlink -f \"$0\")\")\n# 原始镜像tag\nimage_tag=\"${option_s}\"\n# 目标镜像tag\ntarget_tag=\"${option_t}\"\n\necho \"执行docker manifest inspect 读取原始镜像platform信息\"\n# 执行docker manifest inspect命令并获取结果\nresult=$(docker manifest inspect \"${image_tag}\")\necho \"原始镜像platform信息读取成功: ${result}\"\n\n# 解析json数据中的os和architecture属性\ndeclare -a platform_list=()\n\n# 使用jq工具解析manifest inspect结果，获取多架构平台信息\nfor row in $(echo \"${result}\" | jq -c '.manifests[]'); do\n  os=$(echo \"${row}\" | jq -r '.platform.os')\n  architecture=$(echo \"${row}\" | jq -r '.platform.architecture')\n  if [[ \"${architecture}\" == \"unknown\" ]]; then\n      echo \"架构为unknown，跳过\"\n      continue\n  fi\n  platform_list+=(\"${os}/${architecture}\")\ndone\necho \"平台解析结果：${platform_list[*]}\"\n\n## 定义数组，用于存储最终推送到新的harbor的命令\ndeclare -a command_list=()\ncommand_list+=(\"#!/bin/bash\")\ncommand_list+=(\"set -x\")\ncommand_list+=(\"script_dir=\\$(dirname \\\"\\$(readlink -f \\\"\\$0\\\")\\\")\")\n\n# 定义数组，用于存储多架构平台各镜像的临时tag名称\ndeclare -a target_image_tag_list=()\n\n# 遍历所有平台与架构，并逐一拉取镜像后保存为文件\nfor platform_info in \"${platform_list[@]}\"; do\n  echo \"遍历, platform_info:${platform_info} ,${platform_info//\\//-}\"\n#  if [[ \"${platform_info}\" == *\"unknown\" ]]; then\n#    echo \"跳过, 因为 platform_info 包含 'unknown' 关键字: ${platform_info}\"\n#    continue\n#  fi\n  set -x\n  # 删除镜像，已经存在导致最终实际镜像与platform不符\n  docker rmi \"${image_tag}\"\n  # 拉取镜像\n  docker pull --platform \"${platform_info}\" \"${image_tag}\"\n  # 重命名镜像\n  docker tag \"${image_tag}\" \"${target_tag}.${platform_info//\\//-}\"\n  # 保存镜像为本地文件\n  docker save -o  \"${script_dir}/image.${platform_info//\\//-}.tar.gz\" \"${target_tag}.${platform_info//\\//-}\"\n  if [ \"${option_p}\" != \"true\" ]; then\n      docker rmi \"${target_tag}.${platform_info//\\//-}\"\n      docker rmi \"${image_tag}\"\n  fi\n  set +x\n  # 生成加载镜像命令\n  command_list+=(\"docker load -i \\${script_dir}/image.${platform_info//\\//-}.tar.gz\")\n  # 生成推送镜像命令\n  command_list+=(\"docker push ${target_tag}.${platform_info//\\//-}\")\n  if [[ \"${option_p}\" != \"true\" ]]; then\n      command_list+=(\"docker rmi ${target_tag}.${platform_info//\\//-}\")\n  fi\n  target_image_tag_list+=(\"${target_tag}.${platform_info//\\//-}\")\ndone\n\n# 生成创建清单命令\ncommand_list+=(\"docker manifest create --amend --insecure ${target_tag} ${target_image_tag_list[*]}\")\n# 遍历所有平台与架构，并逐一拉取镜像后保存为文件\nfor platform_info in \"${platform_list[@]}\"; do\n  IFS='/' read -ra parts <<< \"${platform_info}\"\n   ## 生成标注清单命令\n  command_list+=(\"docker manifest annotate ${target_tag} ${target_tag}.${platform_info//\\//-} --os ${parts[0]} --arch ${parts[1]}\")\ndone\n\n# 生成推送清单命令\ncommand_list+=(\"docker manifest push --purge --insecure ${target_tag}\")\ncommand_list+=(\"set +x\")\n\ncommand_str=\"\"\nfor command in \"${command_list[@]}\"; do\n  command_str=\"${command_str}\\n${command}\"\ndone\n\necho -e \"${command_str}\" > \"${script_dir}\"/image.push.sh\n\nchmod +x image.push.sh\n\n# 压缩结果\nfind \"${script_dir}\" -name \"image.*\" -exec tar -czvf \"${script_dir}/result.tar\" {} \\;\nfind \"${script_dir}\" -name \"image.*\" -exec rm -rf {} \\;\n\n```","source":"_posts/docker/harbor.md","raw":"---\ntitle: harbor中多架构镜像离线同步\ndate: 2024-02-05 14:43:36\ntags: \n  - harbor \n  - docker \n  - podman\n---\n\n# harbor 多架构镜像维护\n\n## 向harbor推送多架构镜像\n```shell\n## 推送镜像\ndocker push harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64\ndocker push harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64\n## 创建清单\ndocker manifest create --amend --insecure harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64 harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64\n## 为镜像标注平台和架构\ndocker manifest annotate harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64 --os linux --arch amd64\ndocker manifest annotate harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64 --os linux --arch arm64\n## 推送清单\ndocker manifest push --purge --insecure harbor.trscd.com.cn/trs-police/trinodb-trino:438\n\n```\n## 从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中\n- 使用说明\n  - 执行 ./pull.sh -h 查看脚本使用说明。\n  - 脚本执行后产生一个result.tar文件包，将文件离线拷贝解包后，执行里面的push.sh 脚本即可将多架构镜像推送到harbor。\n- 注意： 脚本依赖jq，需要提前安装。\n```shell\n## centos \nyum install jq\n## ubuntu\napt-get install jq\n```\n- 脚本 \n```shell\n#!/bin/bash\n\n# 定义函数来显示帮助文档\ndisplay_help() {\n    cat <<EOF\nUsage: $0 [-h] [-s ARG] [-t ARG] [-p]\n\nOptions:\n  -h 显示帮助.\n  -s 设置原始镜像tag.\n  -t 设置目标镜像tag，不传则不修改镜像tag.\n  -p 保留本地镜像.\nEOF\n    exit 0\n}\n\n# 定义变量来存储参数值\noption_s=\noption_t=\noption_p=\n\n# 解析参数\nwhile getopts \":hs:pt:\" opt; do\n  case $opt in\n    h)\n      display_help\n      ;;\n    s)\n      # shellcheck disable=SC2034\n      option_s=$OPTARG\n      ;;\n    t)\n      # shellcheck disable=SC2034\n      option_t=$OPTARG\n      ;;\n    p)\n      # shellcheck disable=SC2034\n      option_p=\"true\"\n      ;;\n    \\?)\n      # 如果遇到无效的选项，显示帮助文档并退出\n      echo \"Invalid option: -$OPTARG\" >&2\n      display_help\n      ;;\n    :)\n      # 如果选项需要一个参数但没有提供，显示帮助文档并退出\n      echo \"Option -$OPTARG requires an argument.\" >&2\n      display_help\n      ;;\n  esac\ndone\n\n# 检查是否提供了必要的参数\nif [ -z \"$option_s\" ]; then\n    echo \"Error: -s are required.\"\n    display_help\nfi\n\n# 如果目标tag为空，设置目标tag与源tag一致\nif [ -z \"$option_t\" ]; then\n    option_t=\"${option_s}\"\nfi\n\n# 获取脚本目录\nscript_dir=$(dirname \"$(readlink -f \"$0\")\")\n# 原始镜像tag\nimage_tag=\"${option_s}\"\n# 目标镜像tag\ntarget_tag=\"${option_t}\"\n\necho \"执行docker manifest inspect 读取原始镜像platform信息\"\n# 执行docker manifest inspect命令并获取结果\nresult=$(docker manifest inspect \"${image_tag}\")\necho \"原始镜像platform信息读取成功: ${result}\"\n\n# 解析json数据中的os和architecture属性\ndeclare -a platform_list=()\n\n# 使用jq工具解析manifest inspect结果，获取多架构平台信息\nfor row in $(echo \"${result}\" | jq -c '.manifests[]'); do\n  os=$(echo \"${row}\" | jq -r '.platform.os')\n  architecture=$(echo \"${row}\" | jq -r '.platform.architecture')\n  if [[ \"${architecture}\" == \"unknown\" ]]; then\n      echo \"架构为unknown，跳过\"\n      continue\n  fi\n  platform_list+=(\"${os}/${architecture}\")\ndone\necho \"平台解析结果：${platform_list[*]}\"\n\n## 定义数组，用于存储最终推送到新的harbor的命令\ndeclare -a command_list=()\ncommand_list+=(\"#!/bin/bash\")\ncommand_list+=(\"set -x\")\ncommand_list+=(\"script_dir=\\$(dirname \\\"\\$(readlink -f \\\"\\$0\\\")\\\")\")\n\n# 定义数组，用于存储多架构平台各镜像的临时tag名称\ndeclare -a target_image_tag_list=()\n\n# 遍历所有平台与架构，并逐一拉取镜像后保存为文件\nfor platform_info in \"${platform_list[@]}\"; do\n  echo \"遍历, platform_info:${platform_info} ,${platform_info//\\//-}\"\n#  if [[ \"${platform_info}\" == *\"unknown\" ]]; then\n#    echo \"跳过, 因为 platform_info 包含 'unknown' 关键字: ${platform_info}\"\n#    continue\n#  fi\n  set -x\n  # 删除镜像，已经存在导致最终实际镜像与platform不符\n  docker rmi \"${image_tag}\"\n  # 拉取镜像\n  docker pull --platform \"${platform_info}\" \"${image_tag}\"\n  # 重命名镜像\n  docker tag \"${image_tag}\" \"${target_tag}.${platform_info//\\//-}\"\n  # 保存镜像为本地文件\n  docker save -o  \"${script_dir}/image.${platform_info//\\//-}.tar.gz\" \"${target_tag}.${platform_info//\\//-}\"\n  if [ \"${option_p}\" != \"true\" ]; then\n      docker rmi \"${target_tag}.${platform_info//\\//-}\"\n      docker rmi \"${image_tag}\"\n  fi\n  set +x\n  # 生成加载镜像命令\n  command_list+=(\"docker load -i \\${script_dir}/image.${platform_info//\\//-}.tar.gz\")\n  # 生成推送镜像命令\n  command_list+=(\"docker push ${target_tag}.${platform_info//\\//-}\")\n  if [[ \"${option_p}\" != \"true\" ]]; then\n      command_list+=(\"docker rmi ${target_tag}.${platform_info//\\//-}\")\n  fi\n  target_image_tag_list+=(\"${target_tag}.${platform_info//\\//-}\")\ndone\n\n# 生成创建清单命令\ncommand_list+=(\"docker manifest create --amend --insecure ${target_tag} ${target_image_tag_list[*]}\")\n# 遍历所有平台与架构，并逐一拉取镜像后保存为文件\nfor platform_info in \"${platform_list[@]}\"; do\n  IFS='/' read -ra parts <<< \"${platform_info}\"\n   ## 生成标注清单命令\n  command_list+=(\"docker manifest annotate ${target_tag} ${target_tag}.${platform_info//\\//-} --os ${parts[0]} --arch ${parts[1]}\")\ndone\n\n# 生成推送清单命令\ncommand_list+=(\"docker manifest push --purge --insecure ${target_tag}\")\ncommand_list+=(\"set +x\")\n\ncommand_str=\"\"\nfor command in \"${command_list[@]}\"; do\n  command_str=\"${command_str}\\n${command}\"\ndone\n\necho -e \"${command_str}\" > \"${script_dir}\"/image.push.sh\n\nchmod +x image.push.sh\n\n# 压缩结果\nfind \"${script_dir}\" -name \"image.*\" -exec tar -czvf \"${script_dir}/result.tar\" {} \\;\nfind \"${script_dir}\" -name \"image.*\" -exec rm -rf {} \\;\n\n```","slug":"docker/harbor","published":1,"updated":"2024-02-07T22:45:51.175Z","_id":"clsbrm2l10001yrul6fuc1j26","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"harbor-多架构镜像维护\"><a href=\"#harbor-多架构镜像维护\" class=\"headerlink\" title=\"harbor 多架构镜像维护\"></a>harbor 多架构镜像维护</h1><h2 id=\"向harbor推送多架构镜像\"><a href=\"#向harbor推送多架构镜像\" class=\"headerlink\" title=\"向harbor推送多架构镜像\"></a>向harbor推送多架构镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 推送镜像</span></span></span><br><span class=\"line\">docker push harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64</span><br><span class=\"line\">docker push harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 创建清单</span></span></span><br><span class=\"line\">docker manifest create --amend --insecure harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64 harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 为镜像标注平台和架构</span></span></span><br><span class=\"line\">docker manifest annotate harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64 --os linux --arch amd64</span><br><span class=\"line\">docker manifest annotate harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64 --os linux --arch arm64</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 推送清单</span></span></span><br><span class=\"line\">docker manifest push --purge --insecure harbor.trscd.com.cn/trs-police/trinodb-trino:438</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中\"><a href=\"#从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中\" class=\"headerlink\" title=\"从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中\"></a>从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中</h2><ul>\n<li>使用说明<ul>\n<li>执行 .&#x2F;pull.sh -h 查看脚本使用说明。</li>\n<li>脚本执行后产生一个result.tar文件包，将文件离线拷贝解包后，执行里面的push.sh 脚本即可将多架构镜像推送到harbor。</li>\n</ul>\n</li>\n<li>注意： 脚本依赖jq，需要提前安装。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># centos</span></span> </span><br><span class=\"line\">yum install jq</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># ubuntu</span></span></span><br><span class=\"line\">apt-get install jq</span><br></pre></td></tr></table></figure></li>\n<li>脚本 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">定义函数来显示帮助文档</span></span><br><span class=\"line\">display_help() &#123;</span><br><span class=\"line\">    cat &lt;&lt;EOF</span><br><span class=\"line\">Usage: $0 [-h] [-s ARG] [-t ARG] [-p]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -h 显示帮助.</span><br><span class=\"line\">  -s 设置原始镜像tag.</span><br><span class=\"line\">  -t 设置目标镜像tag，不传则不修改镜像tag.</span><br><span class=\"line\">  -p 保留本地镜像.</span><br><span class=\"line\">EOF</span><br><span class=\"line\">    exit 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">定义变量来存储参数值</span></span><br><span class=\"line\">option_s=</span><br><span class=\"line\">option_t=</span><br><span class=\"line\">option_p=</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解析参数</span></span><br><span class=\"line\">while getopts &quot;:hs:pt:&quot; opt; do</span><br><span class=\"line\">  case $opt in</span><br><span class=\"line\">    h)</span><br><span class=\"line\">      display_help</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    s)</span><br><span class=\"line\">      # shellcheck disable=SC2034</span><br><span class=\"line\">      option_s=$OPTARG</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    t)</span><br><span class=\"line\">      # shellcheck disable=SC2034</span><br><span class=\"line\">      option_t=$OPTARG</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    p)</span><br><span class=\"line\">      # shellcheck disable=SC2034</span><br><span class=\"line\">      option_p=&quot;true&quot;</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    \\?)</span><br><span class=\"line\">      # 如果遇到无效的选项，显示帮助文档并退出</span><br><span class=\"line\">      echo &quot;Invalid option: -$OPTARG&quot; &gt;&amp;2</span><br><span class=\"line\">      display_help</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    :)</span><br><span class=\"line\">      # 如果选项需要一个参数但没有提供，显示帮助文档并退出</span><br><span class=\"line\">      echo &quot;Option -$OPTARG requires an argument.&quot; &gt;&amp;2</span><br><span class=\"line\">      display_help</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">  esac</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查是否提供了必要的参数</span></span><br><span class=\"line\">if [ -z &quot;$option_s&quot; ]; then</span><br><span class=\"line\">    echo &quot;Error: -s are required.&quot;</span><br><span class=\"line\">    display_help</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果目标tag为空，设置目标tag与源tag一致</span></span><br><span class=\"line\">if [ -z &quot;$option_t&quot; ]; then</span><br><span class=\"line\">    option_t=&quot;$&#123;option_s&#125;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取脚本目录</span></span><br><span class=\"line\">script_dir=$(dirname &quot;$(readlink -f &quot;$0&quot;)&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">原始镜像tag</span></span><br><span class=\"line\">image_tag=&quot;$&#123;option_s&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标镜像tag</span></span><br><span class=\"line\">target_tag=&quot;$&#123;option_t&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;执行docker manifest inspect 读取原始镜像platform信息&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行docker manifest inspect命令并获取结果</span></span><br><span class=\"line\">result=$(docker manifest inspect &quot;$&#123;image_tag&#125;&quot;)</span><br><span class=\"line\">echo &quot;原始镜像platform信息读取成功: $&#123;result&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解析json数据中的os和architecture属性</span></span><br><span class=\"line\">declare -a platform_list=()</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用jq工具解析manifest inspect结果，获取多架构平台信息</span></span><br><span class=\"line\">for row in $(echo &quot;$&#123;result&#125;&quot; | jq -c &#x27;.manifests[]&#x27;); do</span><br><span class=\"line\">  os=$(echo &quot;$&#123;row&#125;&quot; | jq -r &#x27;.platform.os&#x27;)</span><br><span class=\"line\">  architecture=$(echo &quot;$&#123;row&#125;&quot; | jq -r &#x27;.platform.architecture&#x27;)</span><br><span class=\"line\">  if [[ &quot;$&#123;architecture&#125;&quot; == &quot;unknown&quot; ]]; then</span><br><span class=\"line\">      echo &quot;架构为unknown，跳过&quot;</span><br><span class=\"line\">      continue</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  platform_list+=(&quot;$&#123;os&#125;/$&#123;architecture&#125;&quot;)</span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;平台解析结果：$&#123;platform_list[*]&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 定义数组，用于存储最终推送到新的harbor的命令</span></span></span><br><span class=\"line\">declare -a command_list=()</span><br><span class=\"line\">command_list+=(&quot;#!/bin/bash&quot;)</span><br><span class=\"line\">command_list+=(&quot;set -x&quot;)</span><br><span class=\"line\">command_list+=(&quot;script_dir=\\$(dirname \\&quot;\\$(readlink -f \\&quot;\\$0\\&quot;)\\&quot;)&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">定义数组，用于存储多架构平台各镜像的临时tag名称</span></span><br><span class=\"line\">declare -a target_image_tag_list=()</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">遍历所有平台与架构，并逐一拉取镜像后保存为文件</span></span><br><span class=\"line\">for platform_info in &quot;$&#123;platform_list[@]&#125;&quot;; do</span><br><span class=\"line\">  echo &quot;遍历, platform_info:$&#123;platform_info&#125; ,$&#123;platform_info//\\//-&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> <span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$&#123;platform_info&#125;</span>&quot;</span> == *<span class=\"string\">&quot;unknown&quot;</span> ]]; <span class=\"keyword\">then</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;跳过, 因为 platform_info 包含 &#x27;unknown&#x27; 关键字: <span class=\"variable\">$&#123;platform_info&#125;</span>&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   <span class=\"built_in\">continue</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> <span class=\"keyword\">fi</span></span></span><br><span class=\"line\">  set -x</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">删除镜像，已经存在导致最终实际镜像与platform不符</span></span><br><span class=\"line\">  docker rmi &quot;$&#123;image_tag&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">拉取镜像</span></span><br><span class=\"line\">  docker pull --platform &quot;$&#123;platform_info&#125;&quot; &quot;$&#123;image_tag&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">重命名镜像</span></span><br><span class=\"line\">  docker tag &quot;$&#123;image_tag&#125;&quot; &quot;$&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">保存镜像为本地文件</span></span><br><span class=\"line\">  docker save -o  &quot;$&#123;script_dir&#125;/image.$&#123;platform_info//\\//-&#125;.tar.gz&quot; &quot;$&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;</span><br><span class=\"line\">  if [ &quot;$&#123;option_p&#125;&quot; != &quot;true&quot; ]; then</span><br><span class=\"line\">      docker rmi &quot;$&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;</span><br><span class=\"line\">      docker rmi &quot;$&#123;image_tag&#125;&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  set +x</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">生成加载镜像命令</span></span><br><span class=\"line\">  command_list+=(&quot;docker load -i \\$&#123;script_dir&#125;/image.$&#123;platform_info//\\//-&#125;.tar.gz&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">生成推送镜像命令</span></span><br><span class=\"line\">  command_list+=(&quot;docker push $&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;)</span><br><span class=\"line\">  if [[ &quot;$&#123;option_p&#125;&quot; != &quot;true&quot; ]]; then</span><br><span class=\"line\">      command_list+=(&quot;docker rmi $&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;)</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  target_image_tag_list+=(&quot;$&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;)</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成创建清单命令</span></span><br><span class=\"line\">command_list+=(&quot;docker manifest create --amend --insecure $&#123;target_tag&#125; $&#123;target_image_tag_list[*]&#125;&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">遍历所有平台与架构，并逐一拉取镜像后保存为文件</span></span><br><span class=\"line\">for platform_info in &quot;$&#123;platform_list[@]&#125;&quot;; do</span><br><span class=\"line\">  IFS=&#x27;/&#x27; read -ra parts &lt;&lt;&lt; &quot;$&#123;platform_info&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">   #</span><span class=\"language-bash\"><span class=\"comment\"># 生成标注清单命令</span></span></span><br><span class=\"line\">  command_list+=(&quot;docker manifest annotate $&#123;target_tag&#125; $&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125; --os $&#123;parts[0]&#125; --arch $&#123;parts[1]&#125;&quot;)</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成推送清单命令</span></span><br><span class=\"line\">command_list+=(&quot;docker manifest push --purge --insecure $&#123;target_tag&#125;&quot;)</span><br><span class=\"line\">command_list+=(&quot;set +x&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">command_str=&quot;&quot;</span><br><span class=\"line\">for command in &quot;$&#123;command_list[@]&#125;&quot;; do</span><br><span class=\"line\">  command_str=&quot;$&#123;command_str&#125;\\n$&#123;command&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;$&#123;command_str&#125;&quot; &gt; &quot;$&#123;script_dir&#125;&quot;/image.push.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x image.push.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">压缩结果</span></span><br><span class=\"line\">find &quot;$&#123;script_dir&#125;&quot; -name &quot;image.*&quot; -exec tar -czvf &quot;$&#123;script_dir&#125;/result.tar&quot; &#123;&#125; \\;</span><br><span class=\"line\">find &quot;$&#123;script_dir&#125;&quot; -name &quot;image.*&quot; -exec rm -rf &#123;&#125; \\;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"harbor-多架构镜像维护\"><a href=\"#harbor-多架构镜像维护\" class=\"headerlink\" title=\"harbor 多架构镜像维护\"></a>harbor 多架构镜像维护</h1><h2 id=\"向harbor推送多架构镜像\"><a href=\"#向harbor推送多架构镜像\" class=\"headerlink\" title=\"向harbor推送多架构镜像\"></a>向harbor推送多架构镜像</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 推送镜像</span></span></span><br><span class=\"line\">docker push harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64</span><br><span class=\"line\">docker push harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 创建清单</span></span></span><br><span class=\"line\">docker manifest create --amend --insecure harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64 harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 为镜像标注平台和架构</span></span></span><br><span class=\"line\">docker manifest annotate harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-amd64 --os linux --arch amd64</span><br><span class=\"line\">docker manifest annotate harbor.trscd.com.cn/trs-police/trinodb-trino:438 harbor.trscd.com.cn/trs-police/trinodb-trino:438-arm64 --os linux --arch arm64</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 推送清单</span></span></span><br><span class=\"line\">docker manifest push --purge --insecure harbor.trscd.com.cn/trs-police/trinodb-trino:438</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中\"><a href=\"#从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中\" class=\"headerlink\" title=\"从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中\"></a>从harbor中拉取多架构镜像并保存为文件用于同步到离线环境harbor中</h2><ul>\n<li>使用说明<ul>\n<li>执行 .&#x2F;pull.sh -h 查看脚本使用说明。</li>\n<li>脚本执行后产生一个result.tar文件包，将文件离线拷贝解包后，执行里面的push.sh 脚本即可将多架构镜像推送到harbor。</li>\n</ul>\n</li>\n<li>注意： 脚本依赖jq，需要提前安装。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># centos</span></span> </span><br><span class=\"line\">yum install jq</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># ubuntu</span></span></span><br><span class=\"line\">apt-get install jq</span><br></pre></td></tr></table></figure></li>\n<li>脚本 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">定义函数来显示帮助文档</span></span><br><span class=\"line\">display_help() &#123;</span><br><span class=\"line\">    cat &lt;&lt;EOF</span><br><span class=\"line\">Usage: $0 [-h] [-s ARG] [-t ARG] [-p]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -h 显示帮助.</span><br><span class=\"line\">  -s 设置原始镜像tag.</span><br><span class=\"line\">  -t 设置目标镜像tag，不传则不修改镜像tag.</span><br><span class=\"line\">  -p 保留本地镜像.</span><br><span class=\"line\">EOF</span><br><span class=\"line\">    exit 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">定义变量来存储参数值</span></span><br><span class=\"line\">option_s=</span><br><span class=\"line\">option_t=</span><br><span class=\"line\">option_p=</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解析参数</span></span><br><span class=\"line\">while getopts &quot;:hs:pt:&quot; opt; do</span><br><span class=\"line\">  case $opt in</span><br><span class=\"line\">    h)</span><br><span class=\"line\">      display_help</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    s)</span><br><span class=\"line\">      # shellcheck disable=SC2034</span><br><span class=\"line\">      option_s=$OPTARG</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    t)</span><br><span class=\"line\">      # shellcheck disable=SC2034</span><br><span class=\"line\">      option_t=$OPTARG</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    p)</span><br><span class=\"line\">      # shellcheck disable=SC2034</span><br><span class=\"line\">      option_p=&quot;true&quot;</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    \\?)</span><br><span class=\"line\">      # 如果遇到无效的选项，显示帮助文档并退出</span><br><span class=\"line\">      echo &quot;Invalid option: -$OPTARG&quot; &gt;&amp;2</span><br><span class=\"line\">      display_help</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    :)</span><br><span class=\"line\">      # 如果选项需要一个参数但没有提供，显示帮助文档并退出</span><br><span class=\"line\">      echo &quot;Option -$OPTARG requires an argument.&quot; &gt;&amp;2</span><br><span class=\"line\">      display_help</span><br><span class=\"line\">      ;;</span><br><span class=\"line\">  esac</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查是否提供了必要的参数</span></span><br><span class=\"line\">if [ -z &quot;$option_s&quot; ]; then</span><br><span class=\"line\">    echo &quot;Error: -s are required.&quot;</span><br><span class=\"line\">    display_help</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果目标tag为空，设置目标tag与源tag一致</span></span><br><span class=\"line\">if [ -z &quot;$option_t&quot; ]; then</span><br><span class=\"line\">    option_t=&quot;$&#123;option_s&#125;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取脚本目录</span></span><br><span class=\"line\">script_dir=$(dirname &quot;$(readlink -f &quot;$0&quot;)&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">原始镜像tag</span></span><br><span class=\"line\">image_tag=&quot;$&#123;option_s&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">目标镜像tag</span></span><br><span class=\"line\">target_tag=&quot;$&#123;option_t&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;执行docker manifest inspect 读取原始镜像platform信息&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行docker manifest inspect命令并获取结果</span></span><br><span class=\"line\">result=$(docker manifest inspect &quot;$&#123;image_tag&#125;&quot;)</span><br><span class=\"line\">echo &quot;原始镜像platform信息读取成功: $&#123;result&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解析json数据中的os和architecture属性</span></span><br><span class=\"line\">declare -a platform_list=()</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用jq工具解析manifest inspect结果，获取多架构平台信息</span></span><br><span class=\"line\">for row in $(echo &quot;$&#123;result&#125;&quot; | jq -c &#x27;.manifests[]&#x27;); do</span><br><span class=\"line\">  os=$(echo &quot;$&#123;row&#125;&quot; | jq -r &#x27;.platform.os&#x27;)</span><br><span class=\"line\">  architecture=$(echo &quot;$&#123;row&#125;&quot; | jq -r &#x27;.platform.architecture&#x27;)</span><br><span class=\"line\">  if [[ &quot;$&#123;architecture&#125;&quot; == &quot;unknown&quot; ]]; then</span><br><span class=\"line\">      echo &quot;架构为unknown，跳过&quot;</span><br><span class=\"line\">      continue</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  platform_list+=(&quot;$&#123;os&#125;/$&#123;architecture&#125;&quot;)</span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;平台解析结果：$&#123;platform_list[*]&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 定义数组，用于存储最终推送到新的harbor的命令</span></span></span><br><span class=\"line\">declare -a command_list=()</span><br><span class=\"line\">command_list+=(&quot;#!/bin/bash&quot;)</span><br><span class=\"line\">command_list+=(&quot;set -x&quot;)</span><br><span class=\"line\">command_list+=(&quot;script_dir=\\$(dirname \\&quot;\\$(readlink -f \\&quot;\\$0\\&quot;)\\&quot;)&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">定义数组，用于存储多架构平台各镜像的临时tag名称</span></span><br><span class=\"line\">declare -a target_image_tag_list=()</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">遍历所有平台与架构，并逐一拉取镜像后保存为文件</span></span><br><span class=\"line\">for platform_info in &quot;$&#123;platform_list[@]&#125;&quot;; do</span><br><span class=\"line\">  echo &quot;遍历, platform_info:$&#123;platform_info&#125; ,$&#123;platform_info//\\//-&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> <span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$&#123;platform_info&#125;</span>&quot;</span> == *<span class=\"string\">&quot;unknown&quot;</span> ]]; <span class=\"keyword\">then</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;跳过, 因为 platform_info 包含 &#x27;unknown&#x27; 关键字: <span class=\"variable\">$&#123;platform_info&#125;</span>&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   <span class=\"built_in\">continue</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> <span class=\"keyword\">fi</span></span></span><br><span class=\"line\">  set -x</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">删除镜像，已经存在导致最终实际镜像与platform不符</span></span><br><span class=\"line\">  docker rmi &quot;$&#123;image_tag&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">拉取镜像</span></span><br><span class=\"line\">  docker pull --platform &quot;$&#123;platform_info&#125;&quot; &quot;$&#123;image_tag&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">重命名镜像</span></span><br><span class=\"line\">  docker tag &quot;$&#123;image_tag&#125;&quot; &quot;$&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">保存镜像为本地文件</span></span><br><span class=\"line\">  docker save -o  &quot;$&#123;script_dir&#125;/image.$&#123;platform_info//\\//-&#125;.tar.gz&quot; &quot;$&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;</span><br><span class=\"line\">  if [ &quot;$&#123;option_p&#125;&quot; != &quot;true&quot; ]; then</span><br><span class=\"line\">      docker rmi &quot;$&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;</span><br><span class=\"line\">      docker rmi &quot;$&#123;image_tag&#125;&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  set +x</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">生成加载镜像命令</span></span><br><span class=\"line\">  command_list+=(&quot;docker load -i \\$&#123;script_dir&#125;/image.$&#123;platform_info//\\//-&#125;.tar.gz&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">生成推送镜像命令</span></span><br><span class=\"line\">  command_list+=(&quot;docker push $&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;)</span><br><span class=\"line\">  if [[ &quot;$&#123;option_p&#125;&quot; != &quot;true&quot; ]]; then</span><br><span class=\"line\">      command_list+=(&quot;docker rmi $&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;)</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  target_image_tag_list+=(&quot;$&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125;&quot;)</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成创建清单命令</span></span><br><span class=\"line\">command_list+=(&quot;docker manifest create --amend --insecure $&#123;target_tag&#125; $&#123;target_image_tag_list[*]&#125;&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">遍历所有平台与架构，并逐一拉取镜像后保存为文件</span></span><br><span class=\"line\">for platform_info in &quot;$&#123;platform_list[@]&#125;&quot;; do</span><br><span class=\"line\">  IFS=&#x27;/&#x27; read -ra parts &lt;&lt;&lt; &quot;$&#123;platform_info&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">   #</span><span class=\"language-bash\"><span class=\"comment\"># 生成标注清单命令</span></span></span><br><span class=\"line\">  command_list+=(&quot;docker manifest annotate $&#123;target_tag&#125; $&#123;target_tag&#125;.$&#123;platform_info//\\//-&#125; --os $&#123;parts[0]&#125; --arch $&#123;parts[1]&#125;&quot;)</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成推送清单命令</span></span><br><span class=\"line\">command_list+=(&quot;docker manifest push --purge --insecure $&#123;target_tag&#125;&quot;)</span><br><span class=\"line\">command_list+=(&quot;set +x&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">command_str=&quot;&quot;</span><br><span class=\"line\">for command in &quot;$&#123;command_list[@]&#125;&quot;; do</span><br><span class=\"line\">  command_str=&quot;$&#123;command_str&#125;\\n$&#123;command&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;$&#123;command_str&#125;&quot; &gt; &quot;$&#123;script_dir&#125;&quot;/image.push.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x image.push.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">压缩结果</span></span><br><span class=\"line\">find &quot;$&#123;script_dir&#125;&quot; -name &quot;image.*&quot; -exec tar -czvf &quot;$&#123;script_dir&#125;/result.tar&quot; &#123;&#125; \\;</span><br><span class=\"line\">find &quot;$&#123;script_dir&#125;&quot; -name &quot;image.*&quot; -exec rm -rf &#123;&#125; \\;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clsbrm2kz0000yrulbckv4nq0","tag_id":"clscdp3fq0000i0uldfx402zw","_id":"clscdp3fs0003i0uldu9ubf7g"},{"post_id":"clsbrm2kz0000yrulbckv4nq0","tag_id":"clscdp3fr0001i0ulhwg41rxx","_id":"clscdp3fs0004i0ul55t13nij"},{"post_id":"clsbrm2kz0000yrulbckv4nq0","tag_id":"clscdp3fs0002i0ul1exsensz","_id":"clscdp3fs0005i0ulegj07e9w"},{"post_id":"clsbrm2l10001yrul6fuc1j26","tag_id":"clscdp3ia0006i0ul1llvhfnj","_id":"clscdp3ib0009i0ul1alcdkmm"},{"post_id":"clsbrm2l10001yrul6fuc1j26","tag_id":"clscdp3ib0007i0ulfyuscp9g","_id":"clscdp3ib000ai0uld72k0as0"},{"post_id":"clsbrm2l10001yrul6fuc1j26","tag_id":"clscdp3ib0008i0uldoiah9ur","_id":"clscdp3ib000bi0ul8oal1qji"}],"Tag":[{"name":"harbor docker podman","_id":"clsbrm2l20002yrul6wpw52s5"},{"name":"nexus","_id":"clscdp3fq0000i0uldfx402zw"},{"name":"maven","_id":"clscdp3fr0001i0ulhwg41rxx"},{"name":"java","_id":"clscdp3fs0002i0ul1exsensz"},{"name":"harbor","_id":"clscdp3ia0006i0ul1llvhfnj"},{"name":"docker","_id":"clscdp3ib0007i0ulfyuscp9g"},{"name":"podman","_id":"clscdp3ib0008i0uldoiah9ur"}]}}